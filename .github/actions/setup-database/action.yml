name: 'Setup PR Database'
description: 'Sets up a PostgreSQL database for PR preview environments'
inputs:
  pr-number:
    description: 'The PR number'
    required: true
  project-id:
    description: 'GCP project ID'
    required: true
  region:
    description: 'GCP region'
    required: true
    default: 'europe-west3'
  service-account:
    description: 'Service account email for GCP authentication'
    required: true
  terraform-dir:
    description: 'Directory containing Terraform files'
    required: true
    default: '.terraform'
outputs:
  db_instance_name:
    description: 'Name of the created database instance'
    value: ${{ steps.setup.outputs.db_instance_name }}
  db_name:
    description: 'Name of the created database'
    value: ${{ steps.setup.outputs.db_name }}
  db_username:
    description: 'Database username'
    value: ${{ steps.setup.outputs.db_username }}
  db_password:
    description: 'Database password'
    value: ${{ steps.setup.outputs.db_password }}
  db_connection_name:
    description: 'Full connection name for the database'
    value: ${{ steps.setup.outputs.db_connection_name }}
  vpc_connector_name:
    description: 'Name of the created VPC connector'
    value: ${{ steps.setup.outputs.vpc_connector_name }}
  db_host:
    description: 'Database host IP address'
    value: ${{ steps.setup.outputs.db_host }}

runs:
  using: "composite"
  steps:
    - name: Create terraform.tfvars file
      shell: bash
      run: |
        # Generate random password (hexadecimal for sed compatibility)
        DB_PASSWORD=$(openssl rand -hex 12)
        echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        
        # Create terraform.tfvars file from template
        cd ${{ inputs.terraform-dir }}
        sed -e "s/PR_NUMBER/${{ inputs.pr-number }}/g" \
            -e "s|GENERATED_PASSWORD|$DB_PASSWORD|g" \
            terraform.tfvars.template > terraform.tfvars

    - name: Initialize Terraform
      shell: bash
      run: |
        cd ${{ inputs.terraform-dir }}
        terraform init

    - name: Import Resources
      shell: bash
      run: |
        node ${{ github.action_path }}/../common/import.js \
          --pr-number="${{ inputs.pr-number }}" \
          --project-id="${{ inputs.project-id }}" \
          --region="${{ inputs.region }}" \
          --db-password="${{ env.DB_PASSWORD }}" \
          --terraform-dir="${{ inputs.terraform-dir }}" \
          --import-resources

    - name: Apply Terraform
      shell: bash
      run: |
        cd ${{ inputs.terraform-dir }}
        terraform apply -auto-approve

    - name: Export Outputs
      id: setup
      shell: bash
      run: |
        cd ${{ inputs.terraform-dir }}
        DB_INSTANCE_NAME=$(terraform output -raw db_instance_name)
        DB_NAME=$(terraform output -raw db_name)
        DB_CONNECTION_NAME=$(terraform output -raw db_connection_name)
        VPC_CONNECTOR_NAME=$(terraform output -raw vpc_connector_name)
        
        # Get DB Host IP using our utility
        DB_HOST_IP=$(node ${{ github.action_path }}/../common/get-sql-ip.js \
          --pr-number="${{ inputs.pr-number }}" \
          --project-id="${{ inputs.project-id }}")
        
        # Set outputs for the action
        echo "db_instance_name=$DB_INSTANCE_NAME" >> $GITHUB_OUTPUT
        echo "db_name=$DB_NAME" >> $GITHUB_OUTPUT
        echo "db_username=pr_user" >> $GITHUB_OUTPUT
        echo "db_password=${{ env.DB_PASSWORD }}" >> $GITHUB_OUTPUT
        echo "db_connection_name=$DB_CONNECTION_NAME" >> $GITHUB_OUTPUT
        echo "vpc_connector_name=$VPC_CONNECTOR_NAME" >> $GITHUB_OUTPUT
        echo "db_host=$DB_HOST_IP" >> $GITHUB_OUTPUT
