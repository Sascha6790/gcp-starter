name: Build and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - '.ci/frontend.dockerfile'
      - '.ci/backend.dockerfile'
      - '.github/workflows/build-and-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  REGISTRY_GCP: europe-west3-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/ghcr
  FRONTEND_IMAGE_NAME: ${{ vars.REPOSITORY_OWNER }}/frontend
  BACKEND_IMAGE_NAME: ${{ vars.REPOSITORY_OWNER }}/backend
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  GCP_PROJECT_NUMBER: ${{ vars.GCP_PROJECT_NUMBER }} # 325633707936
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }} # qualified-gist-454616-m5
  GCP_REGION: ${{ vars.GCP_REGION }} # europe-west3

jobs:
  validate:
    name: Validate Code (Lint, Test, Build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Set SHA for Nx Affected Commands
        uses: nrwl/nx-set-shas@v4

      - name: Run Affected Lint, Test, Build, E2E
        run: npx nx affected -t lint test build e2e
  build-and-push-frontend:
    name: Build and Push Frontend Docker Image
    needs: [validate]
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.sha.outputs.short_sha }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short SHA
        id: sha
        run: echo "short_sha=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.environment || 'staging' }}-${{ steps.sha.outputs.short_sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .ci/frontend.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_ENV=${{ github.event.inputs.environment || 'staging' }}

  build-and-push-backend:
    name: Build and Push Backend Docker Image
    needs: [validate]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short SHA
        id: sha
        run: echo "short_sha=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.environment || 'staging' }}-${{ steps.sha.outputs.short_sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .ci/backend.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_ENV=${{ github.event.inputs.environment || 'staging' }}
  setup-database:
    name: Setup Postgres Database
    runs-on: ubuntu-latest
    outputs:
      db_host: ${{ steps.setup-db.outputs.db_host }}
      db_name: ${{ steps.setup-db.outputs.db_name }}
      db_username: ${{ steps.setup-db.outputs.db_username }}
      db_password: ${{ steps.setup-db.outputs.db_password }}
      db_connection_name: ${{ steps.setup-db.outputs.db_connection_name }}
      vpc_connector: ${{ steps.setup-db.outputs.vpc_connector_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS_KEY }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup Database
        id: setup-db
        run: |
          chmod +x .ci/setup-database.sh
          echo "Using Google Application Credentials: $GOOGLE_APPLICATION_CREDENTIALS"
          # Verify credentials file exists
          ls -la $GOOGLE_APPLICATION_CREDENTIALS || echo "Credentials file not found!"
          .ci/setup-database.sh ${{ github.event.pull_request.number }}

  deploy-frontend:
    name: Deploy Frontend to Cloud Run
    needs: [build-and-push-frontend, build-and-push-backend]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS_KEY }}
          service_account: 'github@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: frontend-${{ github.event.inputs.environment || 'staging' }}
          image: ${{ env.REGISTRY_GCP }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.event.inputs.environment || 'staging' }}-${{ needs.build-and-push-frontend.outputs.short_sha }}
          region: ${{ env.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=4000
            --memory=512Mi
            --cpu=1
            --set-env-vars=NODE_ENV=${{ github.event.inputs.environment || 'production' }},BACKEND_API_URL=https://backend-${{ github.event.inputs.environment || 'staging' }}-${{ env.GCP_PROJECT_NUMBER }}.${{ env.GCP_REGION }}.run.app

      - name: Show Output
        run: |
          echo "Frontend deployed to ${{ steps.deploy-frontend.outputs.url }}"

  deploy-backend:
    name: Deploy Backend to Cloud Run
    needs: [build-and-push-frontend, build-and-push-backend, setup-database]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS_KEY }}
          service_account: 'github@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: backend-${{ github.event.inputs.environment || 'staging' }}
          image: ${{ env.REGISTRY_GCP }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.event.inputs.environment || 'staging' }}-${{ needs.build-and-push-frontend.outputs.short_sha }}
          region: ${{ env.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=3000
            --memory=512Mi
            --cpu=1
            --set-env-vars=NODE_ENV=${{ github.event.inputs.environment || 'production' }},FRONTEND_URL=https://frontend-${{ github.event.inputs.environment || 'staging' }}-${{ env.GCP_PROJECT_NUMBER }}.${{ env.GCP_REGION }}.run.app,DB_HOST=${{ needs.setup-database.outputs.db_host }},DB_NAME=${{ needs.setup-database.outputs.db_name }},DB_USERNAME=${{ needs.setup-database.outputs.db_username }},DB_PASSWORD=${{ needs.setup-database.outputs.db_password }}

      - name: Show Output
        run: |
          echo "Backend deployed to ${{ steps.deploy-backend.outputs.url }}"
