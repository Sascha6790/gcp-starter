name: PR Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - '.ci/frontend.dockerfile'
      - '.ci/backend.dockerfile'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  REGISTRY_GCP: europe-west3-docker.pkg.dev/qualified-gist-454616-m5/ghcr
  FRONTEND_IMAGE_NAME: sascha6790/frontend-preview #we can't use github.repository because docker requires a lowercase name
  BACKEND_IMAGE_NAME: sascha6790/backend-preview

jobs:
  setup-database:
    name: Setup Postgres Database
    runs-on: ubuntu-latest
    outputs:
      db_host: ${{ steps.setup-db.outputs.db_instance_name }}
      db_name: ${{ steps.setup-db.outputs.db_name }}
      db_username: ${{ steps.setup-db.outputs.db_username }}
      db_password: ${{ steps.setup-db.outputs.db_password }}
      db_connection_name: ${{ steps.setup-db.outputs.db_connection_name }}
      vpc_connector: ${{ steps.setup-db.outputs.vpc_connector_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS_KEY }}
          service_account: github@qualified-gist-454616-m5.iam.gserviceaccount.com
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup Database
        id: setup-db
        run: |
          chmod +x .ci/setup-database.sh
          echo "Using Google Application Credentials: $GOOGLE_APPLICATION_CREDENTIALS"
          # Verify credentials file exists
          ls -la $GOOGLE_APPLICATION_CREDENTIALS || echo "Credentials file not found!"
          .ci/setup-database.sh ${{ github.event.pull_request.number }}

  build-and-push-frontend:
    name: Build and Push Frontend Preview Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate unique preview ID
        id: preview-id
        run: echo "id=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Get Short SHA
        id: sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.preview-id.outputs.id }}
            type=raw,value=${{ steps.preview-id.outputs.id }}-${{ steps.sha.outputs.short_sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .ci/frontend.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_ENV=staging

  build-and-push-backend:
    name: Build and Push Backend Preview Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate unique preview ID
        id: preview-id
        run: echo "id=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Get Short SHA
        id: sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.preview-id.outputs.id }}
            type=raw,value=${{ steps.preview-id.outputs.id }}-${{ steps.sha.outputs.short_sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .ci/backend.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_ENV=preview

  deploy-frontend-preview:
    name: Deploy Frontend Preview Environment
    needs: [build-and-push-frontend, build-and-push-backend]
    runs-on: ubuntu-latest

    steps:
      - name: Generate unique preview ID
        id: preview-id
        run: echo "id=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS_KEY }}
          service_account: github@qualified-gist-454616-m5.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: frontend-${{ steps.preview-id.outputs.id }}
          image: ${{ env.REGISTRY_GCP }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.preview-id.outputs.id }}
          region: ${{ vars.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=4000
            --memory=512Mi
            --cpu=1
            --set-env-vars=NODE_ENV=staging,BACKEND_API_URL=https://backend-${{ steps.preview-id.outputs.id }}-${{ vars.GCP_PROJECT_ID }}.${{ vars.GCP_REGION }}.run.app
            --tag=pr-preview

      - name: Allow HTTP Access for Frontend
        run: |
          gcloud run services add-iam-policy-binding frontend-${{ steps.preview-id.outputs.id }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ vars.GCP_REGION }} \
            --project=qualified-gist-454616-m5

  deploy-backend-preview:
    name: Deploy Backend Preview Environment
    needs: [build-and-push-frontend, build-and-push-backend, setup-database]
    runs-on: ubuntu-latest

    steps:
      - name: Generate unique preview ID
        id: preview-id
        run: echo "id=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS_KEY }}
          service_account: github@qualified-gist-454616-m5.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: backend-${{ steps.preview-id.outputs.id }}
          image: ${{ env.REGISTRY_GCP }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.preview-id.outputs.id }}
          region: ${{ vars.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=3000
            --memory=512Mi
            --cpu=1
            --set-env-vars=NODE_ENV=preview,PR_NUMBER=${{ github.event.pull_request.number }},FRONTEND_URL=https://frontend-${{ steps.preview-id.outputs.id }}-${{ vars.GCP_PROJECT_ID }}.${{ vars.GCP_REGION }}.run.app,DB_HOST=${{ needs.setup-database.outputs.db_host }},DB_NAME=${{ needs.setup-database.outputs.db_name }},DB_USERNAME=${{ needs.setup-database.outputs.db_username }},DB_PASSWORD=${{ needs.setup-database.outputs.db_password }}
            --tag=pr-preview
            --vpc-connector=${{ needs.setup-database.outputs.vpc_connector }}

      - name: Allow HTTP Access for Backend
        run: |
          gcloud run services add-iam-policy-binding backend-${{ steps.preview-id.outputs.id }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ vars.GCP_REGION }} \
            --project=qualified-gist-454616-m5

  comment-on-pr:
    name: Comment PR with Preview URLs
    needs: [deploy-frontend-preview, deploy-backend-preview]
    runs-on: ubuntu-latest

    steps:
      - name: Generate unique preview ID
        id: preview-id
        run: echo "id=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Calculate service URLs
        id: urls
        run: |
          echo "frontend_url=https://frontend-${{ steps.preview-id.outputs.id }}-${{ vars.GCP_PROJECT_ID }}.${{ vars.GCP_REGION }}.run.app" >> $GITHUB_OUTPUT
          echo "backend_url=https://backend-${{ steps.preview-id.outputs.id }}-${{ vars.GCP_PROJECT_ID }}.${{ vars.GCP_REGION }}.run.app" >> $GITHUB_OUTPUT
          echo "items_url=https://frontend-${{ steps.preview-id.outputs.id }}-${{ vars.GCP_PROJECT_ID }}.${{ vars.GCP_REGION }}.run.app/items" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            const frontendUrl = "${{ steps.urls.outputs.frontend_url }}";
            const backendUrl = "${{ steps.urls.outputs.backend_url }}";
            const itemsUrl = "${{ steps.urls.outputs.items_url }}";

            const body = `## 🚀 Preview Environment Deployed

            Your changes have been deployed to preview environments:

            **Frontend Preview:** [${frontendUrl}](${frontendUrl})
            **Backend API Preview:** [${backendUrl}](${backendUrl})
            **API Test Endpoint:** [${backendUrl}/api/test](${backendUrl}/api/test)
            **Items Management:** [${itemsUrl}](${itemsUrl})

            These environments will be automatically updated when you push new changes to this PR.`;

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body
            });
